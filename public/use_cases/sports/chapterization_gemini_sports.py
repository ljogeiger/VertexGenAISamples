import base64, markdown_to_json
import vertexai, json
from vertexai.generative_models import GenerativeModel, Part, FinishReason
import vertexai.preview.generative_models as generative_models

def generate():
  vertexai.init(project="cloud-llm-preview1", location="us-central1")
  model = GenerativeModel(
    "gemini-1.5-pro-002",
    system_instruction=["""I am providing a video of a sports talk show along with its transcript generated by Whisper. Your task is to divide the video into logical chapters and provide the output in minified JSON format. Use the provided transcript to ensure that chapters do not have abrupt starts or ends, especially focusing on avoiding abrupt ends. Follow these guidelines:

Provided Transcript:

{{transcript}}

Chapter Creation:

• Chapters must be based on visual transitions into new scenes.
• Transitions like moving from a studio interview to a game recap should belong to the same chapter only if they involve the same team or same player.
• Avoid including multiple teams in the same chapter unless they are being directly compared or discussed together in the same context (e.g., a game between the two teams).
• Chapters must not have abrupt starts or ends; ensure they begin and conclude at logical points in the discussion. Use the transcript to identify these logical points, making sure not to cut off sentences or thoughts mid-way.
• Chapters should be continuous without gaps between them.
• **Do not skip any part of the video**

Handling Multiple Teams:

• If two teams are being discussed in relation to each other (e.g., a game recap, head-to-head comparisons), they can be included in the same chapter.
• If the discussion shifts focus from one team to another or from one set of teams to another set of teams without direct relation, create a new chapter for the new team or new set of teams.
• Do not combine discussions of different teams into one chapter if they are separate topics.

Chapter Flow:

• Do not cut off sentences or discussions mid-point; ensure each chapter encapsulates a complete segment of the conversation.
• Pay attention to cues like changes in speakers, topics, or settings to determine logical chapter breaks.
• Utilize the transcript to find natural pauses, sentence endings, or topic shifts to determine where one chapter should end and the next should begin.

Timing Accuracy:

• Ensure that the start_time and end_time are precise, matching the actual points in the video where topics begin and end.
• Use the timestamps in the transcript to accurately align the chapters with the spoken content, ensuring that chapters start and end at the correct times without cutting off important information.
• Chapters should be continuous without any overlaps or gaps between the end time of one chapter and the start time of the next.

Output for Each Chapter:

• start_time: Timecode of the start of the chapter (in MM:SS format).
• end_time: Timecode of the end of the chapter (in MM:SS format).
• reason: Why you thought the chapter should end here. Please explain in detail which instruction led you to make this decision. Also explain whether you looked at visual or audio cues to make your decision and why this ending wasn’t abrupt.
• chapter_title: Provide a concise title that accurately summarizes the chapter’s content, focusing on the main team or topic discussed.
• teams: An array of objects representing the teams being discussed in the chapter’s content. Each object should contain:
    • team_name: The name of the team.
    • relevance_score: A score between 1 and 10 indicating how relevant the team is to the chapter (1 for brief mentions and 10 for chapters that primarily focus on the team).
• league: The league to which the teams belong (e.g., NBA, NFL, EPL).
• sport: The name of the sport to which the chapter belongs (e.g., Football, Basketball, Tennis, etc.).
• overall_importance_score: A score between 1 and 10 indicating the overall importance of the chapter (e.g., 10 for key discussions or recaps, and lower scores for less critical content like show previews).
• is_advertisement: Boolean value (true or false) indicating whether the chapter is a commercial break or other non-sports content (such as promos).

Handling Advertisements (Commercial Breaks):

• Any segment that is a commercial break or promo should be marked as such in the is_advertisement field.
• Advertisements or promos need not include team, player, league, or sport information.

General Instructions:

• When the focus shifts to a different team or topic, initiate a new chapter.
• Ensure chapters do not have abrupt starts or ends by aligning them with natural breaks in the content.
• Refer to the transcript to detect these natural breaks, making sure each chapter starts and ends at appropriate moments in the dialogue without interrupting sentences or key points.
• Maintain continuity without gaps or overlaps between chapters.
• For general sports talk unrelated to specific teams, keep the teams, league, and sport fields empty.

Additional Prompt Instructions:

• You will be provided with a Whisper-based transcript of the video, formatted as a list of dictionaries, each containing start, end, and text fields. Use this transcript to improve timing accuracy and to avoid abrupt chapter endings.
• Leverage the transcript to ensure that chapters start and end at logical points in the conversation, such as at the end of a speaker’s sentence or a complete thought.
• Output the JSON in a minified format without any unnecessary whitespace or line breaks to reduce the size of the response.
• Pay close attention to topic transitions, ensuring that any shift in focus to a new team or subject prompts the creation of a new chapter.
• Listen for keywords or cues that indicate a change in topic, such as “Moving on to…”, “Now let’s discuss…”, or the introduction of a new team/player.

Example Output:

[{"start_time":"00:00:00","end_time":"00:05:23","chapter_title":"Recap of Team A vs Team B Game", "reason": "example reason", "teams":[{"team_name":"Team A","relevance_score":9},{"team_name":"Team B","relevance_score":8}],"league":"NBA","sport":"Basketball","overall_importance_score":9,"is_advertisement":false},{"start_time":"00:05:24","end_time":"00:07:45", "reason": "example reason","chapter_title":"Interview with Player B from Team A","teams":[{"team_name":"Team A","relevance_score":10}],"league":"NBA","sport":"Basketball","overall_importance_score":8,"is_advertisement":false},{"start_time":"00:07:46","end_time":"00:09:30", "reason": "example reason","chapter_title":"Discussion on Team C's Strategy","teams":[{"team_name":"Team C","relevance_score":10}],"league":"NBA","sport":"Basketball","overall_importance_score":7,"is_advertisement":false},{"start_time":"00:09:31","end_time":"00:11:00", "reason": "example reason","chapter_title":"Commercial Break","teams":[],"league":"","sport":"","overall_importance_score":1,"is_advertisement":true}]
"""]
  )
  response = model.generate_content(
      [video1, """Analyze the following video."""],
      generation_config=generation_config,
      safety_settings=safety_settings,
  )
  print(response.text)
  print(json.loads(response.text))

video1 = Part.from_uri(
    mime_type="video/mp4",
    uri="gs://lukas-test-video/clip_9.mp4")

generation_config = {
    "max_output_tokens": 8192,
    "temperature": 0.1,
    "top_p": 0.95,
    "response_mime_type":"application/json",
}

safety_settings = {
    generative_models.HarmCategory.HARM_CATEGORY_HATE_SPEECH: generative_models.HarmBlockThreshold.BLOCK_NONE,
    generative_models.HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: generative_models.HarmBlockThreshold.BLOCK_NONE,
    generative_models.HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: generative_models.HarmBlockThreshold.BLOCK_NONE,
    generative_models.HarmCategory.HARM_CATEGORY_HARASSMENT: generative_models.HarmBlockThreshold.BLOCK_NONE,
}

generate()

